// Decompiled with JetBrains decompiler
// Type: ComponentAce.Compression.Libs.ZLib.ZLibUtil
// Assembly: Microsoft.Dynamic, Version=1.2.2.0, Culture=neutral, PublicKeyToken=7f709c5b713576e1
// MVID: 6FEC0381-2A2D-402C-8B65-6ED3EE0D3308
// Assembly location: C:\Users\futiliter\Documents\Projects\OpenBullet\OpenBullet-ReverseEngineered\libs\Microsoft.Dynamic.dll

using System;
using System.IO;
using System.Text;

#nullable disable
namespace ComponentAce.Compression.Libs.ZLib;

public static class ZLibUtil
{
  public const int MAX_WBITS = 15;
  internal static readonly byte[] mark = new byte[4]
  {
    (byte) 0,
    (byte) 0,
    (byte) ZLibUtil.Identity((long) byte.MaxValue),
    (byte) ZLibUtil.Identity((long) byte.MaxValue)
  };
  internal const int PRESET_DICT = 32 /*0x20*/;
  internal const int zLibBufSize = 1048576 /*0x100000*/;
  internal static readonly string[] z_errmsg = new string[10]
  {
    "need dictionary",
    "stream End",
    "",
    "file error",
    "stream error",
    "data error",
    "insufficient memory",
    "buffer error",
    "incompatible version",
    ""
  };
  internal static readonly int[] inflate_mask = new int[17]
  {
    0,
    1,
    3,
    7,
    15,
    31 /*0x1F*/,
    63 /*0x3F*/,
    (int) sbyte.MaxValue,
    (int) byte.MaxValue,
    511 /*0x01FF*/,
    1023 /*0x03FF*/,
    2047 /*0x07FF*/,
    4095 /*0x0FFF*/,
    8191 /*0x1FFF*/,
    16383 /*0x3FFF*/,
    (int) short.MaxValue,
    (int) ushort.MaxValue
  };
  internal static readonly int[] border = new int[19]
  {
    16 /*0x10*/,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
  };
  internal const int Z_DEFLATED = 8;
  internal const int BL_CODES = 19;
  internal const int D_CODES = 30;
  internal const int LITERALS = 256 /*0x0100*/;
  internal const int LENGTH_CODES = 29;
  internal const int L_CODES = 286;
  internal const int HEAP_SIZE = 573;
  internal const int MAX_BL_BITS = 7;
  internal const int END_BLOCK = 256 /*0x0100*/;
  internal const int REP_3_6 = 16 /*0x10*/;
  internal const int REPZ_3_10 = 17;
  internal const int REPZ_11_138 = 18;
  internal static readonly int[] extra_lbits = new int[29]
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
  };
  internal static readonly int[] extra_dbits = new int[30]
  {
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
  };
  internal static readonly int[] extra_blbits = new int[19]
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
  };
  internal static readonly byte[] bl_order = new byte[19]
  {
    (byte) 16 /*0x10*/,
    (byte) 17,
    (byte) 18,
    (byte) 0,
    (byte) 8,
    (byte) 7,
    (byte) 9,
    (byte) 6,
    (byte) 10,
    (byte) 5,
    (byte) 11,
    (byte) 4,
    (byte) 12,
    (byte) 3,
    (byte) 13,
    (byte) 2,
    (byte) 14,
    (byte) 1,
    (byte) 15
  };
  internal const int Buf_size = 16 /*0x10*/;
  internal const int DIST_CODE_LEN = 512 /*0x0200*/;
  internal static readonly byte[] _dist_code = new byte[512 /*0x0200*/]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 4,
    (byte) 5,
    (byte) 5,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 0,
    (byte) 0,
    (byte) 16 /*0x10*/,
    (byte) 17,
    (byte) 18,
    (byte) 18,
    (byte) 19,
    (byte) 19,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29
  };
  internal static readonly byte[] _length_code = new byte[256 /*0x0100*/]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 5,
    (byte) 6,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 9,
    (byte) 9,
    (byte) 10,
    (byte) 10,
    (byte) 11,
    (byte) 11,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 28
  };
  internal static readonly int[] base_length = new int[29]
  {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    10,
    12,
    14,
    16 /*0x10*/,
    20,
    24,
    28,
    32 /*0x20*/,
    40,
    48 /*0x30*/,
    56,
    64 /*0x40*/,
    80 /*0x50*/,
    96 /*0x60*/,
    112 /*0x70*/,
    128 /*0x80*/,
    160 /*0xA0*/,
    192 /*0xC0*/,
    224 /*0xE0*/,
    0
  };
  internal static readonly int[] base_dist = new int[30]
  {
    0,
    1,
    2,
    3,
    4,
    6,
    8,
    12,
    16 /*0x10*/,
    24,
    32 /*0x20*/,
    48 /*0x30*/,
    64 /*0x40*/,
    96 /*0x60*/,
    128 /*0x80*/,
    192 /*0xC0*/,
    256 /*0x0100*/,
    384,
    512 /*0x0200*/,
    768 /*0x0300*/,
    1024 /*0x0400*/,
    1536 /*0x0600*/,
    2048 /*0x0800*/,
    3072 /*0x0C00*/,
    4096 /*0x1000*/,
    6144,
    8192 /*0x2000*/,
    12288 /*0x3000*/,
    16384 /*0x4000*/,
    24576 /*0x6000*/
  };

  internal static long Identity(long literal) => literal;

  internal static ulong Identity(ulong literal) => literal;

  internal static float Identity(float literal) => literal;

  internal static double Identity(double literal) => literal;

  internal static int URShift(int number, int bits)
  {
    return number >= 0 ? number >> bits : (number >> bits) + (2 << ~bits);
  }

  internal static int URShift(int number, long bits) => ZLibUtil.URShift(number, (int) bits);

  internal static long URShift(long number, int bits)
  {
    return number >= 0L ? number >> bits : (number >> bits) + (2L << ~bits);
  }

  internal static long URShift(long number, long bits) => ZLibUtil.URShift(number, (int) bits);

  internal static int ReadInput(Stream sourceStream, byte[] target, int start, int count)
  {
    if (target.Length == 0)
      return 0;
    byte[] buffer = new byte[target.Length];
    int num = sourceStream.Read(buffer, start, count);
    if (num == 0)
      return -1;
    for (int index = start; index < start + num; ++index)
      target[index] = buffer[index];
    return num;
  }

  internal static int ReadInput(TextReader sourceTextReader, byte[] target, int start, int count)
  {
    if (target.Length == 0)
      return 0;
    char[] buffer = new char[target.Length];
    int num = sourceTextReader.Read(buffer, start, count);
    if (num == 0)
      return -1;
    for (int index = start; index < start + num; ++index)
      target[index] = (byte) buffer[index];
    return num;
  }

  internal static byte[] ToByteArray(string sourceString) => Encoding.UTF8.GetBytes(sourceString);

  internal static char[] ToCharArray(byte[] byteArray) => Encoding.UTF8.GetChars(byteArray);

  internal class CopyLargeArrayToSmall
  {
    private static byte[] srcBuf;
    private static int srcOff;
    private static int srcDataLen;
    private static byte[] destBuff;
    private static int destOff;
    private static int destLen;
    private static int nWritten;

    public static void Initialize(
      byte[] srcBuf,
      int srcOff,
      int srcDataLen,
      byte[] destBuff,
      int destOff,
      int destLen)
    {
      ZLibUtil.CopyLargeArrayToSmall.srcBuf = srcBuf;
      ZLibUtil.CopyLargeArrayToSmall.srcOff = srcOff;
      ZLibUtil.CopyLargeArrayToSmall.srcDataLen = srcDataLen;
      ZLibUtil.CopyLargeArrayToSmall.destBuff = destBuff;
      ZLibUtil.CopyLargeArrayToSmall.destOff = destOff;
      ZLibUtil.CopyLargeArrayToSmall.destLen = destLen;
      ZLibUtil.CopyLargeArrayToSmall.nWritten = 0;
    }

    public static int GetRemainingDataSize() => ZLibUtil.CopyLargeArrayToSmall.srcDataLen;

    public static int CopyData()
    {
      if (ZLibUtil.CopyLargeArrayToSmall.srcDataLen > ZLibUtil.CopyLargeArrayToSmall.destLen)
      {
        Array.Copy((Array) ZLibUtil.CopyLargeArrayToSmall.srcBuf, ZLibUtil.CopyLargeArrayToSmall.srcOff, (Array) ZLibUtil.CopyLargeArrayToSmall.destBuff, ZLibUtil.CopyLargeArrayToSmall.destOff, ZLibUtil.CopyLargeArrayToSmall.destLen);
        ZLibUtil.CopyLargeArrayToSmall.srcDataLen -= ZLibUtil.CopyLargeArrayToSmall.destLen;
        ZLibUtil.CopyLargeArrayToSmall.srcOff += ZLibUtil.CopyLargeArrayToSmall.destLen;
        ZLibUtil.CopyLargeArrayToSmall.nWritten = ZLibUtil.CopyLargeArrayToSmall.destLen;
        return ZLibUtil.CopyLargeArrayToSmall.nWritten;
      }
      Array.Copy((Array) ZLibUtil.CopyLargeArrayToSmall.srcBuf, ZLibUtil.CopyLargeArrayToSmall.srcOff, (Array) ZLibUtil.CopyLargeArrayToSmall.destBuff, ZLibUtil.CopyLargeArrayToSmall.destOff, ZLibUtil.CopyLargeArrayToSmall.srcDataLen);
      ZLibUtil.CopyLargeArrayToSmall.nWritten = ZLibUtil.CopyLargeArrayToSmall.srcDataLen;
      ZLibUtil.CopyLargeArrayToSmall.srcDataLen = 0;
      return ZLibUtil.CopyLargeArrayToSmall.nWritten;
    }
  }
}
