<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="../../Themes/Aero2/Common.xaml"/>
    <ResourceDictionary Source="../../Themes/Aero2/Glyphs.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
  <DataTemplate x:Key="DefaultWatermarkTemplate">
    <ContentControl Foreground="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Focusable="false"
                    Margin="0,0,3,0" Content="{Binding}"/>
  </DataTemplate>
  <Style x:Key="CalculatorToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid SnapsToDevicePixels="true">
            <chrome:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0"
                                 RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                 RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                                 RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:CalculatorUpDown}}"
                                 RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:CalculatorUpDown}}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Grid x:Name="arrowGlyph" IsHitTestVisible="false" Column="1" Margin="5">
                  <Path x:Name="Arrow" Width="9" Height="5" Data="{StaticResource DownArrowGeometry}"
                        Fill="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" Margin="0,1,0,0"/>
                </Grid>
              </Grid>
            </chrome:ButtonChrome>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:CalculatorUpDown}">
    <Setter Property="Control.Background" Value="{DynamicResource {x:Static JetSystemColors.WindowBrushKey}}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}"/>
    <Setter Property="Control.BorderThickness" Value="1,1,0,1"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Right"/>
    <Setter Property="InputBase.TextAlignment" Value="Right"/>
    <Setter Property="InputBase.WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:CalculatorUpDown}">
          <Grid>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <local:ButtonSpinner x:Name="PART_Spinner" IsTabStop="false" Background="{TemplateBinding Control.Background}"
                                   BorderThickness="{TemplateBinding Control.BorderThickness}"
                                   BorderBrush="{TemplateBinding Control.BorderBrush}"
                                   ButtonSpinnerLocation="{TemplateBinding UpDownBase`1.ButtonSpinnerLocation}"
                                   AllowSpin="{TemplateBinding UpDownBase`1.AllowSpin}"
                                   ShowButtonSpinner="{TemplateBinding UpDownBase`1.ShowButtonSpinner}"
                                   VerticalContentAlignment="Stretch" HorizontalAlignment="Stretch">
                <local:WatermarkTextBox x:Name="PART_TextBox" BorderThickness="0" Background="{TemplateBinding Control.Background}"
                                        ContextMenu="{TemplateBinding FrameworkElement.ContextMenu}"
                                        FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                                        FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}"
                                        FontWeight="{TemplateBinding Control.FontWeight}" Foreground="{TemplateBinding Control.Foreground}"
                                        HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsTabStop="true"
                                        MinWidth="20" AcceptsReturn="false" Padding="{TemplateBinding Control.Padding}"
                                        AutoSelectBehavior="{TemplateBinding local:NumericUpDown`1.AutoSelectBehavior}"
                                        AutoMoveFocus="{TemplateBinding local:NumericUpDown`1.AutoMoveFocus}"
                                        TextAlignment="{TemplateBinding InputBase.TextAlignment}" TextWrapping="NoWrap"
                                        TabIndex="{TemplateBinding Control.TabIndex}"
                                        VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                        Watermark="{TemplateBinding InputBase.Watermark}"
                                        WatermarkTemplate="{TemplateBinding InputBase.WatermarkTemplate}"
                                        IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
              </local:ButtonSpinner>
              <ToggleButton x:Name="_calculatorToggleButton" Grid.Column="1" Focusable="false"
                            Style="{StaticResource CalculatorToggleButtonStyle}"
                            IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"/>
            </Grid>
            <Popup x:Name="PART_CalculatorPopup" StaysOpen="false" ToolTip="{x:Static sys:String.Empty}"
                   IsOpen="{Binding IsChecked, ElementName=_calculatorToggleButton}">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type ToolTip}">
                  <Style.Triggers>
                    <Trigger Property="ContentControl.Content" Value="{x:Static sys:String.Empty}">
                      <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Resources>
              <Border BorderThickness="1" Background="{StaticResource PanelBackgroundBrush}"
                      BorderBrush="{StaticResource PopupDarkBorderBrush}" Padding="3">
                <StackPanel>
                  <local:Calculator x:Name="PART_Calculator" Background="Transparent" BorderThickness="0"
                                    DisplayText="{Binding DisplayText, RelativeSource={RelativeSource TemplatedParent}}"
                                    Memory="{Binding Memory, RelativeSource={RelativeSource TemplatedParent}}"
                                    Precision="{Binding Precision, RelativeSource={RelativeSource TemplatedParent}}"/>
                </StackPanel>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource {x:Static themes:ResourceKeys.ControlMouseOverBorderKey}}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
              <Setter Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"
                      Property="FocusManager.FocusedElement"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>