<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="../../Themes/Aero2/Common.xaml"/>
    <ResourceDictionary Source="../../Themes/Aero2/Glyphs.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <DataTemplate x:Key="DefaultWatermarkTemplate">
    <ContentControl Foreground="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Focusable="false"
                    Margin="0,0,3,0" Content="{Binding}"/>
  </DataTemplate>
  <Style x:Key="DateTimePickerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid SnapsToDevicePixels="true">
            <chrome:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0"
                                 RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                 RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                                 RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:DateTimePicker}}"
                                 RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:DateTimePicker}}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Grid x:Name="arrowGlyph" IsHitTestVisible="false" Column="1" Margin="5">
                  <Path x:Name="Arrow" Width="9" Height="5" Data="{StaticResource DownArrowGeometry}"
                        Fill="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" Margin="0,1,0,0"/>
                </Grid>
              </Grid>
            </chrome:ButtonChrome>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:DateTimePicker}">
    <Setter Property="Control.Background" Value="{DynamicResource {x:Static JetSystemColors.WindowBrushKey}}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}"/>
    <Setter Property="Control.BorderThickness" Value="1,1,0,1"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Right"/>
    <Setter Property="InputBase.TextAlignment" Value="Right"/>
    <Setter Property="local:DateTimePicker.TimeWatermarkTemplate"
            Value="{StaticResource DefaultWatermarkTemplate}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="InputBase.WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}"/>
    <Setter Property="local:DateTimePicker.CalendarWidth" Value="178"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DateTimePicker}">
          <Border>
            <Grid>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <local:ButtonSpinner x:Name="PART_Spinner" IsTabStop="false" Background="{TemplateBinding Control.Background}"
                                     BorderThickness="{TemplateBinding Control.BorderThickness}"
                                     BorderBrush="{TemplateBinding Control.BorderBrush}"
                                     ButtonSpinnerLocation="{TemplateBinding UpDownBase`1.ButtonSpinnerLocation}"
                                     HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                     AllowSpin="{TemplateBinding UpDownBase`1.AllowSpin}"
                                     ShowButtonSpinner="{TemplateBinding UpDownBase`1.ShowButtonSpinner}">
                  <local:WatermarkTextBox x:Name="PART_TextBox" BorderThickness="0" Background="Transparent"
                                          FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                                          FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}"
                                          FontWeight="{TemplateBinding Control.FontWeight}" Foreground="{TemplateBinding Control.Foreground}"
                                          HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" IsTabStop="true"
                                          MinWidth="20" AcceptsReturn="false" Padding="{TemplateBinding Control.Padding}"
                                          TextAlignment="{TemplateBinding InputBase.TextAlignment}" TextWrapping="NoWrap"
                                          TabIndex="{TemplateBinding Control.TabIndex}" Watermark="{TemplateBinding InputBase.Watermark}"
                                          WatermarkTemplate="{TemplateBinding InputBase.WatermarkTemplate}"
                                          IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                          Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"/>
                </local:ButtonSpinner>
                <ToggleButton x:Name="_calendarToggleButton" Grid.Column="1" Background="White" Focusable="false"
                              Style="{StaticResource DateTimePickerToggleButtonStyle}"
                              IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                              IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                              IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                              Visibility="{TemplateBinding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}}"/>
              </Grid>
              <Popup x:Name="PART_Popup" StaysOpen="false" ToolTip="{x:Static sys:String.Empty}"
                     IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}">
                <FrameworkElement.Resources>
                  <Style TargetType="{x:Type ToolTip}">
                    <Style.Triggers>
                      <Trigger Property="ContentControl.Content" Value="{x:Static sys:String.Empty}">
                        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Resources>
                <Border BorderThickness="1" Background="{StaticResource PanelBackgroundBrush}"
                        BorderBrush="{StaticResource PopupDarkBorderBrush}" Padding="3">
                  <StackPanel>
                    <Calendar x:Name="PART_Calendar" BorderThickness="0"
                              DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}">
                      <Control.Template>
                        <ControlTemplate TargetType="{x:Type Calendar}">
                          <Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource AncestorType={x:Type local:DateTimePicker}}}">
                            <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                              <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                                            Background="{TemplateBinding Control.Background}"
                                            Style="{TemplateBinding Calendar.CalendarItemStyle}"/>
                            </StackPanel>
                          </Viewbox>
                        </ControlTemplate>
                      </Control.Template>
                    </Calendar>
                    <local:TimePicker x:Name="PART_TimeUpDown" Background="{DynamicResource {x:Static JetSystemColors.WindowBrushKey}}"
                                      Foreground="{DynamicResource {x:Static JetSystemColors.WindowTextBrushKey}}"
                                      Format="{TemplateBinding local:DateTimePicker.TimeFormat}"
                                      FormatString="{TemplateBinding local:DateTimePicker.TimeFormatString}"
                                      AllowSpin="{TemplateBinding local:DateTimePicker.TimePickerAllowSpin}"
                                      Step="{TemplateBinding DateTimeUpDownBase`1.Step}"
                                      ShowButtonSpinner="{TemplateBinding local:DateTimePicker.TimePickerShowButtonSpinner}"
                                      Watermark="{TemplateBinding local:DateTimePicker.TimeWatermark}"
                                      WatermarkTemplate="{TemplateBinding local:DateTimePicker.TimeWatermarkTemplate}"
                                      Visibility="{TemplateBinding local:DateTimePicker.TimePickerVisibility}"
                                      Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                      Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                      Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                      Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                      IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </StackPanel>
                </Border>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource {x:Static themes:ResourceKeys.ControlMouseOverBorderKey}}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="true"/>
            </MultiDataTrigger>
            <DataTrigger Value="True" Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}">
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="true"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
              <Setter Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"
                      Property="FocusManager.FocusedElement"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>