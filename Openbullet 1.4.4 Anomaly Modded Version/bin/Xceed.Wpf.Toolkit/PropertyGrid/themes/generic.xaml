<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:pg="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:editor="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Editors"
                    xmlns:prim="clr-namespace:Xceed.Wpf.Toolkit.Primitives"
                    xmlns:pgconv="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Converters"
                    xmlns:utilities="clr-namespace:Xceed.Wpf.Toolkit.Core.Utilities"
                    xmlns:commands="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Commands"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="../../NumericUpDown/Themes/Generic.xaml"/>
    <ResourceDictionary Source="../../DateTimeUpDown/Themes/Generic.xaml"/>
    <ResourceDictionary Source="../../TimeSpanUpDown/Themes/Generic.xaml"/>
    <ResourceDictionary Source="../../WatermarkTextBox/Themes/Generic.xaml"/>
    <ResourceDictionary Source="../../ColorPicker/Themes/Generic.xaml"/>
    <ResourceDictionary Source="../../CollectionControl/Themes/Generic.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
  <conv:HalfConverter x:Key="HalfConverter"/>
  <conv:NullToBoolConverter x:Key="NullToBoolConverter"/>
  <pgconv:ObjectToUIElementConverter x:Key="ObjectToUIElementConverter"/>
  <pgconv:IsStringEmptyConverter x:Key="IsStringEmptyConverter"/>
  <pgconv:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter"/>
  <pgconv:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter"/>
  <pgconv:SelectedObjectConverter x:Key="objectConverter"/>
  <pgconv:PropertyItemEditorConverter x:Key="PropertyItemEditorConverter"/>
  <x:Static x:Key="EmptyString" Member="sys:String.Empty"/>
  <Style x:Key="PropertyGridNumericUpDown" TargetType="{x:Type prim:InputBase}"
         BasedOn="{StaticResource NumericUpDown}"/>
  <Style TargetType="{x:Type editor:PropertyGridEditorByteUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorDecimalUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorDoubleUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorIntegerUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorLongUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorShortUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorSingleUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorDateTimeUpDown}"
         BasedOn="{StaticResource DateTimeUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorTimeSpanUpDown}"
         BasedOn="{StaticResource TimeSpanUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorComboBox}"
         BasedOn="{StaticResource {x:Type ComboBox}}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.Background" Value="Transparent"/>
      </MultiTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorCheckBox}"
         BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="FrameworkElement.Margin" Value="5,0,0,0"/>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorTextBox}" BasedOn="{StaticResource WatermarkTextBox}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsEnabled" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderThickness" Value="0"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorTextBlock}"
         BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="TextBlock.Foreground" Value="Gray"/>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorMaskedTextBox}"
         BasedOn="{StaticResource {x:Type TextBox}}"/>
  <Style TargetType="{x:Type editor:PropertyGridEditorColorPicker}"
         BasedOn="{StaticResource {x:Type local:ColorPicker}}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="local:ColorPicker.ShowDropDownButton" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorPrimitiveTypeCollectionControl}"
         BasedOn="{StaticResource PrimitiveTypeCollectionControl}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="ContentControl.Content" Value="(Collection)"/>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorCollectionControl}"
         BasedOn="{StaticResource CollectionControlButton}"/>
  <Style TargetType="{x:Type editor:PropertyGridEditorSByteUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorUIntegerUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorULongUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type editor:PropertyGridEditorUShortUpDown}"
         BasedOn="{StaticResource PropertyGridNumericUpDown}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="prim:UpDownBase`1.ShowButtonSpinner" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="MouseOverBorderBrush" Color="#FFFFB700"/>
  <LinearGradientBrush x:Key="MouseOverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFEFBF4"/>
    <GradientStop Offset="0.19" Color="#FFFDE7CE"/>
    <GradientStop Offset="0.39" Color="#FFFDDEB8"/>
    <GradientStop Offset="0.39" Color="#FFFFCE6B"/>
    <GradientStop Offset="0.79" Color="#FFFFDE9A"/>
    <GradientStop Offset="1" Color="#FFFFEBAA"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="CheckedBorderBrush" Color="#FFC29B29"/>
  <LinearGradientBrush x:Key="CheckedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFFDCA0"/>
    <GradientStop Offset="0.18" Color="#FFFFD692"/>
    <GradientStop Offset="0.39" Color="#FFFFC45D"/>
    <GradientStop Offset="1" Color="#FFFFD178"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="PressedBorderBrush" Color="#FFC29B29"/>
  <LinearGradientBrush x:Key="PressedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFE3C085"/>
    <GradientStop Offset="0.19" Color="#FFF4CC89"/>
    <GradientStop Offset="0.36" Color="#FFF5C777"/>
    <GradientStop Offset="0.36" Color="#FFF5BB56"/>
    <GradientStop Offset="0.79" Color="#FFF4CE9A"/>
    <GradientStop Offset="1" Color="#FFF3E28D"/>
  </LinearGradientBrush>
  <Style x:Key="OptionsToggleButtonStyle" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="FrameworkElement.Height" Value="22"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid SnapsToDevicePixels="true">
            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="2"/>
            <Border x:Name="MiddleBorder" BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                    CornerRadius="2">
              <Border x:Name="InnerBorder" BorderBrush="Transparent"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                      CornerRadius="2" Padding="{TemplateBinding Control.Padding}">
                <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                  <ContentPresenter x:Name="Content" Content="{TemplateBinding ContentControl.Content}" Margin="1"
                                    RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </StackPanel>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#80FFFFFF"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Content" Property="UIElement.Opacity" Value="0.5"/>
              <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="#FF9E9E9E"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="OuterBorder" Value="{StaticResource CheckedBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="OuterBorder" Value="{StaticResource CheckedBorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFE7CBAD" Offset="0"/>
                    <GradientStop Color="#FFF7D7B5" Offset="0.1"/>
                    <GradientStop Color="#FFFFD38C" Offset="0.36"/>
                    <GradientStop Color="#FFFFC75A" Offset="0.36"/>
                    <GradientStop Color="#FFFFEFA5" Offset="1"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="MiddleBorder" Property="Border.Background">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#40FFFEFE" Offset="0"/>
                    <GradientStop Color="#40FFFEFE" Offset="0.39"/>
                    <GradientStop Color="#20FFCE68" Offset="0.39"/>
                    <GradientStop Color="#20FFCE68" Offset="0.69"/>
                    <GradientStop Color="#10FFFFFF" Offset="1"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Height" Value="22"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
    <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
    <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid SnapsToDevicePixels="true">
            <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="2"/>
            <Border x:Name="MiddleBorder" BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                    CornerRadius="2">
              <Border x:Name="InnerBorder" BorderBrush="Transparent"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                      CornerRadius="2" Padding="{TemplateBinding Control.Padding}">
                <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                  <ContentPresenter x:Name="Content" Content="{TemplateBinding ContentControl.Content}" Margin="1"
                                    RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </StackPanel>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#80FFFFFF"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Content" Property="UIElement.Opacity" Value="0.5"/>
              <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="#FF9E9E9E"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="GlyphBrush" Color="#FF31347C"/>
  <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="20"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Rectangle x:Name="Rectangle" Margin="0,0,0,0" Fill="Transparent"/>
      <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{StaticResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z" RenderTransformOrigin="0.5,0.5">
        <UIElement.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="1" ScaleY="1"/>
            <SkewTransform AngleX="0" AngleY="0"/>
            <RotateTransform Angle="-90"/>
            <TranslateTransform X="0" Y="0"/>
          </TransformGroup>
        </UIElement.RenderTransform>
      </Path>
      <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{StaticResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z" RenderTransformOrigin="0.5,0.5">
        <UIElement.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="1" ScaleY="1"/>
            <SkewTransform AngleX="0" AngleY="0"/>
            <RotateTransform Angle="135"/>
            <TranslateTransform X="0" Y="0"/>
          </TransformGroup>
        </UIElement.RenderTransform>
      </Path>
      <ContentPresenter Grid.Column="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="Down_Arrow" Property="UIElement.OpacityMask" Value="#FF000000"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Background" Value="#FFF0F0F0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition x:Name="ContentRow" Height="*"/>
            </Grid.RowDefinitions>
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="#FFF0F0F0">
              <ToggleButton Template="{StaticResource ExpanderToggleButton}" OverridesDefaultStyle="true"
                            IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Margin="1" RecognizesAccessKey="true" ContentSource="Header" TextElement.FontWeight="Bold"/>
              </ToggleButton>
            </Border>
            <Border x:Name="ExpandSite" Visibility="Collapsed" Grid.Row="1"
                    Background="{x:Static JetSystemColors.ControlBrush}" Padding="10 0 0 0">
              <Border BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch">
                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
              <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyExpanderStyle" TargetType="{x:Type Expander}">
    <Setter Property="Control.Padding" Value="10 0 0 0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Border x:Name="ExpandSite" Visibility="Collapsed" Grid.Row="1" Padding="0 0 0 0">
              <Border BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch">
                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
              <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
    <Style.Resources>
      <ResourceDictionary/>
    </Style.Resources>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Expander x:Name="expander" Style="{StaticResource ExpanderStyle}" IsExpanded="true" Header="{Binding Name}">
              <ItemsPresenter/>
            </Expander>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}" Value="True"/>
          <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}"
                     Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GroupItem}">
              <ItemsPresenter/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <ItemsPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ContextMenu x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type pg:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}">
    <MenuItem Header="Reset Value" Command="commands:PropertyItemCommands.ResetValue"
              CommandParameter="{Binding}"
              CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
  </ContextMenu>
  <pg:CategoryGroupStyleSelector x:Key="categoryGroupStyleSelector"
                                 SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}"
                                 ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}"/>
  <Style TargetType="{x:Type pg:PropertyItemBase}">
    <Setter Property="Control.Background" Value="{x:Static JetSystemColors.WindowBrush}"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type pg:PropertyItemBase}">
          <Border ContextMenuService.Placement="Bottom"
                  ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pg:PropertyGrid}}}"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border x:Name="PART_Name" Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" Margin="0,0,1,0"
                      VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Grid Margin="2,2,2,2" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="15"/>
                      <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton x:Name="_expandableButton" Grid.Column="0" Template="{StaticResource ExpanderToggleButton}"
                                  OverridesDefaultStyle="true"
                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                  Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <pg:TrimmedTextBlock x:Name="_text" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                                         TextTrimming="CharacterEllipsis"
                                         Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}"
                                         HighlightedText="{Binding HighlightedText, RelativeSource={RelativeSource TemplatedParent}}"
                                         IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}"/>
                  </Grid>
                  <Grid Column="1" HorizontalAlignment="Right" Margin="5,0,5,0"
                        utilities:ContextMenuUtilities.OpenOnMouseLeftButtonClick="true"
                        Visibility="{Binding ShowAdvancedOptions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"
                        ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
                    <Image x:Name="_optionsImage" Width="11" Height="11"
                           ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </Grid>
                </Grid>
              </Border>
              <Border x:Name="PART_Editor" Grid.Column="1" Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      KeyboardNavigation.DirectionalNavigation="None" VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch">
                <FrameworkElement.ToolTip>
                  <ToolTip Visibility="Collapsed"/>
                </FrameworkElement.ToolTip>
                <ContentControl x:Name="PART_ValueContainer" Focusable="false" IsTabStop="false"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                  <ContentControl.Content>
                    <MultiBinding Converter="{StaticResource PropertyItemEditorConverter}">
                      <Binding Path="Editor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="IsReadOnly" RelativeSource="{RelativeSource AncestorType={x:Type pg:PropertyGrid}}"/>
                    </MultiBinding>
                  </ContentControl.Content>
                </ContentControl>
              </Border>
              <Expander x:Name="_propertyExpander" Grid.ColumnSpan="2" Grid.Row="1"
                        IsExpanded="{TemplateBinding pg:PropertyItemBase.IsExpanded}"
                        Style="{StaticResource PropertyExpanderStyle}" IsEnabled="true">
                <pg:PropertyItemsControl x:Name="PART_PropertyItemsControl" IsTabStop="false" Focusable="false"
                                         VirtualizingStackPanel.VirtualizationMode="Recycling" ScrollViewer.CanContentScroll="true"
                                         ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                         ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                         VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <VirtualizingStackPanel/>
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                  <ItemsControl.GroupStyle>
                    <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}"/>
                  </ItemsControl.GroupStyle>
                  <Control.Template>
                    <ControlTemplate>
                      <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                              Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <ScrollViewer Padding="{TemplateBinding Control.Padding}" Focusable="false" VerticalScrollBarVisibility="Auto">
                          <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                      </Border>
                    </ControlTemplate>
                  </Control.Template>
                </pg:PropertyItemsControl>
              </Expander>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Name" Property="Border.Background" Value="#CED4DF"/>
            </Trigger>
            <Trigger Property="pg:PropertyItemBase.IsSelected" Value="true">
              <Setter TargetName="PART_Name" Property="Border.Background" Value="#43577B"/>
              <Setter TargetName="PART_Name" Property="TextElement.Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_ValueContainer"
                      Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
              <Setter TargetName="_text" Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}"
                      Property="TextBlock.Foreground"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ShowDescriptionByTooltip, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}"
                           Value="True"/>
                <Condition Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={StaticResource IsStringEmptyConverter}}"
                           Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_Name"
                      Value="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="ToolTipService.ToolTip"/>
            </MultiDataTrigger>
            <Trigger Property="Validation.HasError" Value="true">
              <Setter Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}"
                      Property="FrameworkElement.ToolTip"/>
            </Trigger>
            <Trigger SourceName="_expandableButton" Property="UIElement.Visibility" Value="Visible">
              <Setter Property="UIElement.Focusable" Value="false"/>
            </Trigger>
            <DataTrigger Value="{x:Static pg:StringConstants.Local}"
                         Binding="{Binding ElementName=_optionsImage, Path=ToolTip}">
              <Setter TargetName="_optionsImage" Property="Image.Source" Value="../Images/Local11.png"/>
            </DataTrigger>
            <DataTrigger Value="{x:Static pg:StringConstants.Resource}"
                         Binding="{Binding ElementName=_optionsImage, Path=ToolTip}">
              <Setter TargetName="_optionsImage" Property="Image.Source" Value="../Images/Resource11.png"/>
            </DataTrigger>
            <DataTrigger Value="{x:Static pg:StringConstants.Databinding}"
                         Binding="{Binding ElementName=_optionsImage, Path=ToolTip}">
              <Setter TargetName="_optionsImage" Property="Image.Source" Value="../Images/Database11.png"/>
            </DataTrigger>
            <DataTrigger Value="{x:Static pg:StringConstants.Inheritance}"
                         Binding="{Binding ElementName=_optionsImage, Path=ToolTip}">
              <Setter TargetName="_optionsImage" Property="Image.Source" Value="../Images/Inheritance11.png"/>
            </DataTrigger>
            <DataTrigger Value="{x:Static pg:StringConstants.StyleSetter}"
                         Binding="{Binding ElementName=_optionsImage, Path=ToolTip}">
              <Setter TargetName="_optionsImage" Property="Image.Source" Value="../Images/Style11.png"/>
            </DataTrigger>
            <DataTrigger Value="{x:Static pg:StringConstants.Default}"
                         Binding="{Binding ElementName=_optionsImage, Path=ToolTip}">
              <Setter TargetName="_optionsImage" Property="Image.Source" Value="../Images/AdvancedProperties11.png"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type pg:PropertyGrid}">
    <Setter Property="pg:PropertyGrid.AdvancedOptionsMenu"
            Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type pg:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}}"/>
    <Setter Property="Control.Background" Value="#BCC7D8"/>
    <Setter Property="Control.BorderBrush" Value="#43577B"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="pg:PropertyGrid.SelectedObjectType"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=Type}"/>
    <Setter Property="pg:PropertyGrid.SelectedObjectTypeName"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=TypeName}"/>
    <Setter Property="pg:PropertyGrid.SelectedObjectName"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=SelectedObjectName}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type pg:PropertyGrid}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid Margin="{TemplateBinding Control.Padding}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <StackPanel x:Name="selectObjectNamePanel" Orientation="Horizontal">
                <Border Background="White" BorderBrush="Black" BorderThickness="1" Width="44" Height="44" Margin="6,4,0,4"
                        Padding="2"
                        Visibility="{Binding ShowPreview, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Rectangle>
                    <Shape.Fill>
                      <VisualBrush Stretch="Uniform"
                                   Visual="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToUIElementConverter}, Path=SelectedObject}"/>
                    </Shape.Fill>
                  </Rectangle>
                </Border>
                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="6,2,6,4"
                            Visibility="{Binding ShowTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}">
                    <pg:TrimmedTextBlock Text="{TemplateBinding pg:PropertyGrid.SelectedObjectTypeName}" TextTrimming="CharacterEllipsis"
                                         FontWeight="Bold"/>
                  </Grid>
                  <Grid Margin="5,0,0,0"
                        MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}">
                    <pg:TrimmedTextBlock Text="{TemplateBinding pg:PropertyGrid.SelectedObjectName}" TextTrimming="CharacterEllipsis"/>
                  </Grid>
                </StackPanel>
              </StackPanel>
              <Grid x:Name="toolsContainer" Row="1" Margin="4,0,4,4">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid x:Name="sortButtonContainer" Margin="4"
                      Visibility="{Binding ShowSortOptions, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <StackPanel Orientation="Horizontal" Margin="1">
                    <RadioButton VerticalAlignment="Center" Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Categorized"
                                 IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}">
                      <Image Source="./../Images/Categorize16.png" Width="16" Height="16"/>
                    </RadioButton>
                    <RadioButton VerticalAlignment="Center" Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Alphabetical"
                                 IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}">
                      <Image Source="./../Images/SortAscending16.png" Width="16" Height="16"/>
                    </RadioButton>
                  </StackPanel>
                </Grid>
                <Border x:Name="searchBoxContainer" Grid.Column="1" Margin="4,4,0,4" Background="White" BorderBrush="Gray"
                        BorderThickness="1"
                        Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <local:WatermarkTextBox x:Name="_txtFilter" Background="Transparent"
                                            Watermark="{TemplateBinding pg:PropertyGrid.FilterWatermark}" BorderThickness="1"
                                            Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}">
                      <FrameworkElement.Style>
                        <Style TargetType="{x:Type Control}">
                          <Setter Property="Control.BorderBrush" Value="Transparent"/>
                          <Style.Triggers>
                            <Trigger Property="UIElement.IsMouseOver" Value="true">
                              <Setter Property="Control.BorderBrush" Value="{StaticResource MouseOverBorderBrush}"/>
                            </Trigger>
                          </Style.Triggers>
                        </Style>
                      </FrameworkElement.Style>
                    </local:WatermarkTextBox>
                    <Button Grid.Column="1" Command="commands:PropertyGridCommands.ClearFilter"
                            Style="{StaticResource ClearFilterButtonStyle}" HorizontalAlignment="Left">
                      <Image Source="./../Images/ClearFilter16.png" Width="16" Height="16"/>
                    </Button>
                  </Grid>
                </Border>
              </Grid>
              <Grid Row="2" Background="{x:Static JetSystemColors.WindowBrush}">
                <pg:PropertyItemsControl x:Name="PART_PropertyItemsControl" IsTabStop="false" Focusable="false"
                                         Background="{x:Static JetSystemColors.ControlBrush}"
                                         VirtualizingStackPanel.VirtualizationMode="Recycling" ScrollViewer.CanContentScroll="true"
                                         VerticalAlignment="Top"
                                         ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                         ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                         VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <VirtualizingStackPanel/>
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                  <ItemsControl.GroupStyle>
                    <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}"/>
                  </ItemsControl.GroupStyle>
                  <Control.Template>
                    <ControlTemplate>
                      <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                              Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="ScrollBar" Padding="{TemplateBinding Control.Padding}" Focusable="false"
                                      VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                          <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                      </Border>
                      <ControlTemplate.Triggers>
                        <DataTrigger Value="True"
                                     Binding="{Binding ShowHorizontalScrollBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
                          <Setter TargetName="ScrollBar" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                        </DataTrigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Control.Template>
                </pg:PropertyItemsControl>
                <Thumb x:Name="PART_DragThumb" HorizontalAlignment="Left" Width="5" Margin="6,0,0,0" Cursor="SizeWE">
                  <Control.Template>
                    <ControlTemplate>
                      <Border Background="Transparent"/>
                    </ControlTemplate>
                  </Control.Template>
                </Thumb>
              </Grid>
              <GridSplitter Height="3" Grid.Row="3" HorizontalAlignment="Stretch"
                            Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
              <StackPanel Grid.Row="4" Margin="0,0,0,5"
                          Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock Padding="2 2 2 0" FontWeight="Bold"
                           Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}"/>
                <TextBlock Padding="5 2 2 0" TextWrapping="WrapWithOverflow"
                           Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}"/>
              </StackPanel>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="searchBoxContainer" Property="UIElement.Visibility" Value="Collapsed"/>
                <Condition SourceName="sortButtonContainer" Property="UIElement.Visibility" Value="Collapsed"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="toolsContainer" Property="UIElement.Visibility" Value="Collapsed"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>