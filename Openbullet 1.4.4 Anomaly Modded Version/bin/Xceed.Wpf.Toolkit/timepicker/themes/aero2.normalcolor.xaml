<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="../../Themes/Aero2/Common.xaml"/>
    <ResourceDictionary Source="../../Themes/Aero2/Glyphs.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
  <conv:ObjectTypeToNameConverter x:Key="ObjectTypeToNameConverter"/>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <DataTemplate x:Key="DefaultWatermarkTemplate">
    <ContentControl Foreground="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Focusable="false"
                    Margin="0,0,3,0" Content="{Binding}"/>
  </DataTemplate>
  <Style x:Key="TimePickerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid SnapsToDevicePixels="true">
            <chrome:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0"
                                 RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                 RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                                 RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:TimePicker}}"
                                 RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:TimePicker}}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Grid x:Name="arrowGlyph" IsHitTestVisible="false" Column="1" Margin="5">
                  <Path x:Name="Arrow" Width="9" Height="5" Data="{StaticResource DownArrowGeometry}"
                        Fill="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" Margin="0,1,0,0"/>
                </Grid>
              </Grid>
            </chrome:ButtonChrome>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TimeItemStyle" TargetType="{x:Type ListBoxItem}">
    <Style.Setters>
      <Setter Property="Control.Padding" Value="4"/>
    </Style.Setters>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="ListBoxItem.IsSelected" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="#FFB8E0F3"/>
        <Setter Property="Control.BorderBrush" Value="#FF26A0DA"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="false"/>
          <Condition Property="ListBoxItem.IsSelected" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="#FFC4E5F6"/>
        <Setter Property="Control.BorderBrush" Value="#FF26A0DA"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="ListBoxItem.IsSelected" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="#FFD1E8FF"/>
        <Setter Property="Control.BorderBrush" Value="#FF66A7E8"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:TimePicker}">
    <Setter Property="Control.Background" Value="{DynamicResource {x:Static JetSystemColors.WindowBrushKey}}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Control.BorderBrush"
            Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}"/>
    <Setter Property="Control.BorderThickness" Value="1,1,0,1"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Right"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="InputBase.TextAlignment" Value="Right"/>
    <Setter Property="InputBase.WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:TimePicker}">
          <Grid x:Name="root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <local:ButtonSpinner x:Name="PART_Spinner" IsTabStop="false" Background="{TemplateBinding Control.Background}"
                                 BorderThickness="{TemplateBinding Control.BorderThickness}" HorizontalContentAlignment="Stretch"
                                 VerticalContentAlignment="Stretch" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                 ButtonSpinnerLocation="{TemplateBinding UpDownBase`1.ButtonSpinnerLocation}"
                                 AllowSpin="{TemplateBinding UpDownBase`1.AllowSpin}"
                                 ShowButtonSpinner="{TemplateBinding UpDownBase`1.ShowButtonSpinner}">
              <local:WatermarkTextBox x:Name="PART_TextBox" BorderThickness="0" Background="Transparent"
                                      FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                                      FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}"
                                      FontWeight="{TemplateBinding Control.FontWeight}" Foreground="{TemplateBinding Control.Foreground}"
                                      HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" IsTabStop="true"
                                      MinWidth="20" AcceptsReturn="false" Padding="{TemplateBinding Control.Padding}"
                                      TextAlignment="{TemplateBinding InputBase.TextAlignment}" TextWrapping="NoWrap"
                                      TabIndex="{TemplateBinding Control.TabIndex}" Watermark="{TemplateBinding InputBase.Watermark}"
                                      WatermarkTemplate="{TemplateBinding InputBase.WatermarkTemplate}"
                                      IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                      Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"/>
            </local:ButtonSpinner>
            <ToggleButton x:Name="_timePickerToggleButton" Grid.Column="1" Background="White" Focusable="false"
                          Style="{StaticResource TimePickerToggleButtonStyle}"
                          IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                          IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                          IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                          Visibility="{TemplateBinding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" StaysOpen="false"
                   ToolTip="{x:Static sys:String.Empty}"
                   IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type ToolTip}">
                  <Style.Triggers>
                    <Trigger Property="ContentControl.Content" Value="{x:Static sys:String.Empty}">
                      <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Resources>
              <Border BorderThickness="1" MaxHeight="{TemplateBinding local:TimePicker.MaxDropDownHeight}"
                      Background="{StaticResource PanelBackgroundBrush}"
                      BorderBrush="{StaticResource PopupDarkBorderBrush}"
                      MinWidth="{Binding ActualWidth, ElementName=root}">
                <Grid>
                  <ListBox x:Name="PART_TimeListItems" BorderThickness="0" DisplayMemberPath="Display"
                           ItemContainerStyle="{StaticResource TimeItemStyle}"/>
                </Grid>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource {x:Static themes:ResourceKeys.ControlMouseOverBorderKey}}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False"/>
                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="true"/>
            </MultiDataTrigger>
            <DataTrigger Value="True" Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}">
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="true"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
              <Setter Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"
                      Property="FocusManager.FocusedElement"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                <Condition Binding="{Binding TemplatedParent, RelativeSource={RelativeSource Self}, Converter={StaticResource ObjectTypeToNameConverter}}"
                           Value="DateTimePicker"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="_timePickerToggleButton" Property="UIElement.IsHitTestVisible" Value="true"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>