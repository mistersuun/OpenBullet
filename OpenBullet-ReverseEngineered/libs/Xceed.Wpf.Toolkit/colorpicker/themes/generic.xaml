<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="..\..\Themes\Generic\Common.xaml"/>
    <ResourceDictionary Source="..\..\Themes\Generic\Glyphs.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <SolidColorBrush x:Key="ButtonHover" Color="#C2E0FF"/>
  <SolidColorBrush x:Key="ButtonHoverBorder" Color="#3399FF"/>
  <SolidColorBrush x:Key="ButtonChecked" Color="#E6F0FA"/>
  <SolidColorBrush x:Key="ButtonPressed" Color="#99CCFF"/>
  <SolidColorBrush x:Key="ButtonPressedBorder" Color="#3399FF"/>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
  <conv:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter"/>
  <conv:AdditionConverter x:Key="AdditionConverter"/>
  <conv:ColorModeToTabItemSelectedConverter x:Key="ColorModeToTabItemSelectedConverter"/>
  <LinearGradientBrush x:Key="ColorPickerDarkBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFA3AEB9" Offset="0"/>
    <GradientStop Color="#FF8399A9" Offset="0.375"/>
    <GradientStop Color="#FF718597" Offset="0.375"/>
    <GradientStop Color="#FF617584" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Offset="0" Color="#FFffffff"/>
        <GradientStop Offset="1" Color="#FFE8EBED"/>
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <Style x:Key="ColorItemContainerStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="FrameworkElement.ToolTip" Value="{Binding Name}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid x:Name="mainGrid" ToolTip="{Binding Name}">
            <FrameworkElement.Resources>
              <Style TargetType="{x:Type ToolTip}">
                <Style.Triggers>
                  <Trigger Property="ContentControl.Content" Value="{x:Static sys:String.Empty}">
                    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                  </Trigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Resources>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Border x:Name="_outerBorder" BorderThickness="1" Background="Transparent" BorderBrush="Transparent"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border x:Name="_innerBorder" Background="Transparent" BorderThickness="1" BorderBrush="Transparent"
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_outerBorder" Property="Border.BorderBrush" Value="#FFFF0000"/>
              <Setter TargetName="_innerBorder" Property="Border.BorderBrush" Value="#FFFFFF00"/>
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <Setter TargetName="_outerBorder" Property="Border.BorderBrush" Value="#FFFF0000"/>
              <Setter TargetName="_innerBorder" Property="Border.BorderBrush" Value="#FFFFFF00"/>
            </Trigger>
            <DataTrigger Value="False"
                         Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource AncestorType={x:Type local:ColorPicker}}}">
              <Setter Value="{x:Static sys:String.Empty}" TargetName="mainGrid" Property="FrameworkElement.ToolTip"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="ColorItemTemplate">
    <Grid>
      <Border Background="{StaticResource CheckerBrush}" BorderBrush="Black" BorderThickness="1" Margin="2,2,2,2">
        <Rectangle Width="14" Height="14">
          <FrameworkElement.Style>
            <Style TargetType="{x:Type Rectangle}">
              <Setter Property="Shape.Fill"
                      Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}"/>
            </Style>
          </FrameworkElement.Style>
        </Rectangle>
      </Border>
    </Grid>
  </DataTemplate>
  <Style x:Key="ColorPickerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid SnapsToDevicePixels="true">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Border Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
              </Border>
              <chrome:ButtonChrome x:Name="ToggleButtonChrome" Grid.Column="1" CornerRadius="0,2.75,2.75,0"
                                   RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                   RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                                   Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                                   RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}">
                <Grid x:Name="arrowGlyph" IsHitTestVisible="false" Column="1" Margin="5">
                  <Path x:Name="Arrow" Width="9" Height="5" Data="{StaticResource DownArrowGeometry}" Fill="#FF000000"
                        Margin="0,1,0,0"/>
                </Grid>
              </chrome:ButtonChrome>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColorDisplayStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="ContentControl.ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border Background="{StaticResource CheckerBrush}">
            <Rectangle Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}"/>
          </Border>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                   Value="{x:Null}">
        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ColorListStyle" TargetType="{x:Type ListBox}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MaxHeight" Value="500"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding MaxDropDownWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ColorPicker}}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}"/>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Converter={StaticResource AdditionConverter}, ConverterParameter=-4}"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ColorItemContainerStyle}"/>
    <Setter Property="ItemsControl.ItemTemplate" Value="{StaticResource ColorItemTemplate}"/>
    <Setter Property="ListBox.SelectionMode" Value="Single"/>
  </Style>
  <ControlTemplate x:Key="TabItemTemplate" TargetType="{x:Type local:ColorPickerTabItem}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
      <Border x:Name="mainBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,0"
              Background="#FFF0F0F0" Margin="0">
        <Border x:Name="innerBorder" BorderBrush="#ACACAC" BorderThickness="1,1,1,0" Background="#FFF0F0F0"
                Margin="-1" Opacity="0"/>
      </Border>
      <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="false"
                        Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                        HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                        VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Panel.ZIndex" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="-2,-2,-2,0"/>
        <Setter TargetName="innerBorder" Property="UIElement.Opacity" Value="1"/>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type local:ColorPicker}">
    <Setter Property="Control.Background" Value="White"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource ColorPickerDarkBorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1,1,0,1"/>
    <Setter Property="local:ColorPicker.ButtonStyle" Value="{StaticResource ColorPickerToggleButtonStyle}"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="local:ColorPicker.MaxDropDownWidth" Value="250"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ColorPicker}">
          <Grid>
            <ToggleButton x:Name="PART_ColorPickerToggleButton" IsTabStop="true" MinHeight="22"
                          Background="{TemplateBinding Control.Background}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          Padding="{TemplateBinding Control.Padding}" Style="{TemplateBinding local:ColorPicker.ButtonStyle}"
                          IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                          IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
              <Grid Margin="2">
                <ContentControl x:Name="ColorOnly" Style="{StaticResource ColorDisplayStyle}"/>
                <Border x:Name="ColorAndName" Background="White" Visibility="Hidden">
                  <StackPanel Orientation="Horizontal">
                    <ContentControl HorizontalAlignment="Left" Width="20" Margin="2,1,4,1" Style="{StaticResource ColorDisplayStyle}"
                                    BorderThickness="1" BorderBrush="#FFC9CACA"/>
                    <TextBlock VerticalAlignment="Center"
                               Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </StackPanel>
                </Border>
              </Grid>
            </ToggleButton>
            <Popup x:Name="PART_ColorPickerPalettePopup" VerticalAlignment="Bottom" StaysOpen="false"
                   AllowsTransparency="true" Focusable="false" HorizontalOffset="1" VerticalOffset="1"
                   PopupAnimation="Slide" ToolTip="{x:Static sys:String.Empty}"
                   Width="{TemplateBinding local:ColorPicker.MaxDropDownWidth}"
                   IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type ToolTip}">
                  <Style.Triggers>
                    <Trigger Property="ContentControl.Content" Value="{x:Static sys:String.Empty}">
                      <Setter Property="UIElement.Visibility" Value="Collapsed"/>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Resources>
              <Border BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}"
                      BorderBrush="{StaticResource ColorPickerDarkBorderBrush}" Padding="3">
                <TabControl x:Name="ColorPickerTabControl" Background="Transparent"
                            SelectedIndex="{Binding ColorMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorModeToTabItemSelectedConverter}}">
                  <local:ColorPickerTabItem x:Name="StandardTabItem" Template="{StaticResource TabItemTemplate}"
                                            Header="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid x:Name="_colorPaletteHost" Margin="4">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                      </Grid.RowDefinitions>
                      <Grid Row="1"
                            Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                          </Grid.RowDefinitions>
                          <TextBlock Text="{TemplateBinding local:ColorPicker.AvailableColorsHeader}" Background="AliceBlue" Padding="2"
                                     Margin="0,0,0,1"/>
                          <ListBox x:Name="PART_AvailableColors" Grid.Row="1" Style="{StaticResource ColorListStyle}"
                                   ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                      </Grid>
                      <Grid Row="2"
                            Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                          </Grid.RowDefinitions>
                          <TextBlock Text="{TemplateBinding local:ColorPicker.StandardColorsHeader}" Background="AliceBlue" Padding="2"
                                     Margin="0,1,0,1"/>
                          <ListBox x:Name="PART_StandardColors" Grid.Row="1" Style="{StaticResource ColorListStyle}"
                                   ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                      </Grid>
                      <Grid Row="3" Margin="0,1,0,1"
                            Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="22"/>
                          </Grid.RowDefinitions>
                          <TextBlock Text="{TemplateBinding local:ColorPicker.RecentColorsHeader}" Background="AliceBlue" Padding="2"
                                     Margin="0,1,0,1"/>
                          <ListBox x:Name="PART_RecentColors" Grid.Row="1" Style="{StaticResource ColorListStyle}"
                                   ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                      </Grid>
                    </Grid>
                  </local:ColorPickerTabItem>
                  <local:ColorPickerTabItem x:Name="AdvancedTabItem" Template="{StaticResource TabItemTemplate}"
                                            Header="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid x:Name="_colorCanvasHost"
                          Width="{Binding MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}">
                      <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden">
                        <local:ColorCanvas Background="Transparent" BorderThickness="0"
                                           UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"
                                           SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}"/>
                      </ScrollViewer>
                    </Grid>
                  </local:ColorPickerTabItem>
                </TabControl>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="local:ColorPicker.DisplayColorAndName" Value="true">
              <Setter TargetName="ColorOnly" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ColorAndName" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="local:ColorPicker.ShowTabHeaders" Value="false">
              <Setter TargetName="StandardTabItem" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="AdvancedTabItem" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="local:ColorPicker.ShowDropDownButton" Value="false">
              <Setter Property="Control.BorderThickness" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>